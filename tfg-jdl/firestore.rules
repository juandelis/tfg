service cloud.firestore {
  match /databases/{database}/documents {
    // True if the user is signed in
    function signedIn() {
      return (request.auth.uid != null);
    }


    match /accounts/{document} {
    	// Test
      function test() {
        return ['a', 'b'].toSet() == ['b', 'a'].toSet();
      }

      // True if the user is in its own document
      function ownUserDocument() {
        return (request.auth.uid == document);
      }
      // True if the update doesn't change email
      function validOwnUserUpdate() {
        return (request.resource.data.email == resource.data.email);
      }

      allow read: if signedIn();
      allow create: if ownUserDocument();
      allow update: if (ownUserDocument() && validOwnUserUpdate());
      allow delete: if ownUserDocument();
    }



    match /follows/{document} {
      allow read: if signedIn();
      allow create: if ((request.resource.data.ori == request.auth.uid) &&
      									(request.resource.data.dest != request.auth.uid));
      allow delete: if ((resource.data.ori == request.auth.uid) &&
      									(resource.data.dest != request.auth.uid));
    }



    match /posts/{document} {
      // True if the post is from another user
      function otherUserDocument() {
        return (request.auth.uid != null) &&
        			 (resource.data.creatorId != request.auth.uid);
      }
      // True if the update only added/remove the uid in the likes/dislikes
      function validOtherUserUpdate() {
        return (request.resource.data.body == resource.data.body) &&
        			 (request.resource.data.creatorId == resource.data.creatorId) &&
               (request.resource.data.creatorName == resource.data.creatorName) &&
        			 (request.resource.data.date == resource.data.date) &&
               (request.resource.data.tittle == resource.data.tittle) &&
               (
            		// Add uid to the likes
            		((request.resource.data.likes.size() == resource.data.likes.size()+1) &&
                 !(request.auth.uid in resource.data.likes) &&
                 (request.resource.data.likes.hasAll(resource.data.likes.concat([request.auth.uid]))))
              	||
            		// Remove uid from the likes
            		((request.resource.data.likes.size() == resource.data.likes.size()-1) &&
                 (request.auth.uid in resource.data.likes) &&
                 (request.resource.data.likes.hasAll(resource.data.likes.removeAll([request.auth.uid]))))
              	||
            		// Add uid to the dislikes
            		((request.resource.data.dislikes.size() == resource.data.dislikes.size()+1) &&
                 !(request.auth.uid in resource.data.dislikes) &&
                 (request.resource.data.dislikes.hasAll(resource.data.dislikes.concat([request.auth.uid]))))
              	||
            		// Remove uid from the dislikes
            		((request.resource.data.dislikes.size() == resource.data.dislikes.size()-1) &&
                 (request.auth.uid in resource.data.dislikes) &&
                 (request.resource.data.dislikes.hasAll(resource.data.dislikes.removeAll([request.auth.uid]))))
               );
      }

      allow read: if signedIn();
      allow create: if (signedIn() && (request.resource.data.creatorId == request.auth.uid));
      allow update: if (otherUserDocument() && validOtherUserUpdate());
      allow delete: if (signedIn() && (resource.data.creatorId == request.auth.uid));
    }
  }
}
