service cloud.firestore {
  match /databases/{database}/documents {
    // True if the user is signed in
    function signedIn() {
      return request.auth.uid != null;
    }
      
    match /accounts/{document} {
      // True if the user is in its own document
      function ownUserDocument() {
        return request.auth.uid == document;
      }
      // True if the update doesn't change email or followers, and dont follow itself
      function validOwnUserUpdate() {
        return (request.resource.data.email == resource.data.email)
        		&& (request.resource.data.followers == resource.data.followers)
            && !(request.auth.uid in request.resource.data.following);
      }
      
      // True if the user is in another users document
      function otherUserDocument() {
        return request.auth.uid != null 
          	&& request.auth.uid != document;
      }
      // True if the update only added/remove the uid in the followers
      function validOtherUserUpdate() {
        return (request.resource.data.birth == resource.data.birth)
        		&& (request.resource.data.email == resource.data.email)
        		&& (request.resource.data.genre == resource.data.genre)
        		&& (request.resource.data.image == resource.data.image)
        		&& (request.resource.data.info == resource.data.info)
        		&& (request.resource.data.name == resource.data.name)
        		&& (request.resource.data.following == resource.data.following)
        		&& (
            		// Add uid to the followers = follow
            		((request.resource.data.followers.size() == resource.data.followers.size()+1)
                 &&
                 !(request.auth.uid in resource.data.followers)
                 &&
                 (request.auth.uid in request.resource.data.followers))
              	||
            		// Remove uid of the followers = unfollow
            		((request.resource.data.followers.size() == resource.data.followers.size()-1)
                 &&
                 (request.auth.uid in resource.data.followers)
                 &&
                 !(request.auth.uid in request.resource.data.followers))
               );
      }
    
      allow read;
      allow create: if ownUserDocument();
      allow update: if ((ownUserDocument() && validOwnUserUpdate())
      								 ||
                       (otherUserDocument() && validOtherUserUpdate()));
      allow delete: if ownUserDocument();
    }
      
      
    match /posts/{document} {
      // True if the post is from the logged user
      function ownUserDocument() {
        return resource.data.creatorId == request.auth.uid;
      }
      // True if the update only change body or tittle
      function validOwnUserUpdate() {
        return (request.resource.data.creatorId == resource.data.creatorId)
        		&& (request.resource.data.creatorName == resource.data.creatorName)
        		&& (request.resource.data.date == resource.data.date)
        		&& (request.resource.data.dislikes == resource.data.dislikes)
        		&& (request.resource.data.likes == resource.data.likes);
      }
      
      // True if the user is in another users document
      function otherUserDocument() {
        return request.auth.uid != null 
          	&& resource.data.creatorId != request.auth.uid;
      }
      // True if the update only added/remove the uid in the likes/dislikes
      function validOtherUserUpdate() {
        return (request.resource.data.body == resource.data.body)
        		&& (request.resource.data.creatorId == resource.data.creatorId)
        		&& (request.resource.data.creatorName == resource.data.creatorName)
        		&& (request.resource.data.date == resource.data.date)
        		&& (request.resource.data.tittle == resource.data.tittle)
        		&& (
            		// Add uid to the likes
            		((request.resource.data.likes.size() == resource.data.likes.size()+1)
                 &&
                 !(request.auth.uid in resource.data.likes)
                 &&
                 (request.auth.uid in request.resource.data.likes))
              	||
            		// Remove uid from the likes
            		((request.resource.data.likes.size() == resource.data.likes.size()-1)
                 &&
                 (request.auth.uid in resource.data.likes)
                 &&
                 !(request.auth.uid in request.resource.data.likes))
              	||
            		// Add uid to the dislikes
            		((request.resource.data.dislikes.size() == resource.data.dislikes.size()+1)
                 &&
                 !(request.auth.uid in resource.data.dislikes)
                 &&
                 (request.auth.uid in request.resource.data.dislikes))
              	||
            		// Remove uid from the dislikes
            		((request.resource.data.dislikes.size() == resource.data.dislikes.size()-1)
                 &&
                 (request.auth.uid in resource.data.dislikes)
                 &&
                 !(request.auth.uid in request.resource.data.dislikes))
              	||
            		// Nothing changed in like/dislike
            		((request.resource.data.likes == resource.data.likes)
                 &&
                 (request.resource.data.dislikes == resource.data.dislikes))
               );
      }
    
      allow read;
      allow create: if signedIn();
      allow update: if (ownUserDocument() && validOwnUserUpdate())
      								 ||
                       (otherUserDocument() && validOtherUserUpdate());
      allow delete: if ownUserDocument();
    }
  }
}